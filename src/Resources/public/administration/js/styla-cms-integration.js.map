{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/app/assets/icons/svg sync nonrecursive svg$","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/preview/styles.scss","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-blocks/module-content/preview/styles.scss","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-blocks/module-content/component/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-blocks/module-content/component/cms-block-styla-module-content.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-blocks/module-content/preview/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-blocks/module-content/preview/cms-block-styla-module-content-preview.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-blocks/module-content/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/component/cms-element-styla-module-content.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/component/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/config/cms-element-styla-module-content-config.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/config/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/preview/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/preview/cms-element-styla-module-content-preview.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/pages/styla-cms-integration-settings/styla-cms-integration-settings.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/pages/styla-cms-integration-settings/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/pages/page-listing/listing.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/pages/page-listing/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/components/styla-plugin-settings-icon/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/components/styla-plugin-settings-icon/styla-plugin-settings-icon.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/components/styla-cms-integration-settings-accounts/styla-cms-integration-settings-accounts.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/components/styla-cms-integration-settings-accounts/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/components/styla-cms-integration-settings-general/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/components/styla-cms-integration-settings-general/styla-cms-integration-settings-general.html.twig","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/index.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/app/assets/icons/icons.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/init/svg-icons.init.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/services/api/styla.page.api.service.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/init/styla-page-api-service-init.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/services/api/styla.synchronization.api.service.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/init/styla-synchronization-api-service-init.js","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/pages/styla-cms-integration-settings/styla-cms-integration-settings.scss","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/app/assets/icons/svg/icons-styla-plugin-settings.svg","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/styla-cms-integration/pages/page-listing/listing.scss","webpack:////var/www/html/custom/plugins/shopware6/src/Resources/app/administration/src/module/cms-elements/module-content/component/styles.scss"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","map","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","resolve","content","default","locals","add","Shopware","Component","register","template","Service","registerCmsBlock","category","label","component","previewComponent","defaultConfig","slots","type","_Shopware","Mixin","mixins","getByName","created","this","createdComponent","methods","initElementConfig","registerCmsElement","configComponent","slotId","source","required","Defaults","Criteria","Data","inject","data","isLoading","isSaveSuccessful","defaultAccountNameFilled","messageAccountBlankErrorState","config","salesChannels","salesChannelDomains","metaInfo","title","$createTitle","computed","salesChannelRepository","repositoryFactory","salesChannelDomainsRepository","defaultAccountNameErrorState","hasError","watch","handler","$refs","allConfigs","null","salesChannelId","selectedSalesChannelId","deep","_this","doneLoading","criteria","addFilter","equalsAny","storefrontSalesChannelTypeId","apiSalesChannelTypeId","search","Context","api","then","res","translated","$tc","finally","domainCriteria","push","length","_res$i","url","isValidUrl","detail","onSave","save","_this2","URL","err","date","Utils","format","repository","pages","lastSuccessSynchronizationDate","scheduleSynchronizationSuccess","scheduleSynchronizationProcessing","resetSynchronizationSuccess","resetSynchronizationProcessing","columns","getColumns","domainsRepository","domainSearchCriteria","addSorting","sort","equals","domainsSearchPromise","result","domainsList","systemConfigurationFetchPromise","systemConfigApiService","getValues","settings","foundPages","pagesRequestPromise","Promise","all","stylaSynchronizationApiService","getLastSuccessSynchronizationDate","hour","minute","catch","error","console","createNotificationError","message","allowResize","primary","resetSynchronizationStatus","response","stuck","createNotificationSuccess","cleared","createNotificationWarning","undefined","errorCode","scheduleSynchronization","stylaPageApiService","isScheduled","refreshPageDetails","item","promise","createNotificationInfo","isSuccess","computePathLink","pagesPathHashMap","matchedLanguageId","accountNames","languageId","accountName","domainEntity","find","element","domainUrl","defaultDomainUrl","domainUrls","pathString","concat","path","replace","resetScheduleSynchronizationState","resetTheResetSynchronizationState","props","actualConfigData","String","Boolean","configAccountName","configDomainUrl","systemLanguages","languageRepository","initLanguageConfig","Array","isArray","$set","checkTextFieldInheritance","configPrefix","_i","_Object$entries","entries","pagesListSynchronizationInterval","pageCacheDuration","_Object$entries$_i","_slicedToArray","defaultValue","Module","description","color","icon","snippets","enGB","routes","meta","parentPath","navigation","parent","position","settingsItem","group","to","iconComponent","backgroundEnabled","context","require","reduce","accumulator","split","functional","render","createElement","elementContext","class","staticClass","style","attrs","on","domProps","innerHTML","iconComponents","StylaPageApiService","httpClient","loginService","_classCallCheck","headers","getHeaders","post","pageId","Accept","Authorization","getToken","container","initContainer","Application","getContainer","StylaSynchronizationApiService","listToStyles","parentId","list","styles","newStyles","part","css","media","sourceMap","parts","hasDocument","document","DEBUG","stylesInDom","head","getElementsByTagName","singletonElement","singletonCounter","isProduction","noop","options","ssrIdKey","isOldIE","navigator","test","userAgent","toLowerCase","addStylesClient","_isProduction","_options","addStylesToDom","newList","mayRemove","domStyle","refs","j","addStyle","createStyleElement","styleElement","appendChild","obj","update","remove","querySelector","parentNode","removeChild","styleIndex","applyToSingletonTag","applyToTag","newObj","textStore","replaceText","index","replacement","filter","join","styleSheet","cssText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","ssrId","sources","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,gCAIjBlC,EAAoBA,EAAoBmC,EAAI,Q,yBClFrD,IAAIC,EAAM,CACT,oCAAqC,QAItC,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOtC,EAAoBuC,GAE5B,SAASC,EAAsBF,GAC9B,IAAItC,EAAoBa,EAAEuB,EAAKE,GAAM,CACpC,IAAIG,EAAI,IAAIC,MAAM,uBAAyBJ,EAAM,KAEjD,MADAG,EAAEE,KAAO,mBACHF,EAEP,OAAOL,EAAIE,GAEZD,EAAeO,KAAO,WACrB,OAAO9B,OAAO8B,KAAKR,IAEpBC,EAAeQ,QAAUL,EACzBrC,EAAOD,QAAUmC,EACjBA,EAAeE,GAAK,Q,uBCnBpB,IAAIO,EAAU,EAAQ,QACnBA,EAAQtB,aAAYsB,EAAUA,EAAQC,SACnB,iBAAZD,IAAsBA,EAAU,CAAC,CAAC3C,EAAOC,EAAI0C,EAAS,MAC7DA,EAAQE,SAAQ7C,EAAOD,QAAU4C,EAAQE,SAG/BC,EADH,EAAQ,QAAyJF,SAC1J,WAAYD,GAAS,EAAM,K,uBCN5C,IAAIA,EAAU,EAAQ,QACnBA,EAAQtB,aAAYsB,EAAUA,EAAQC,SACnB,iBAAZD,IAAsBA,EAAU,CAAC,CAAC3C,EAAOC,EAAI0C,EAAS,MAC7DA,EAAQE,SAAQ7C,EAAOD,QAAU4C,EAAQE,SAG/BC,EADH,EAAQ,QAAyJF,SAC1J,WAAYD,GAAS,EAAM,K,oECPtBI,SAAdC,UAEEC,SAAS,iCAAkC,CACjDC,SCLW,mG,UCGOH,SAAdC,UAEEC,SAAS,yCAA0C,CACzDC,SCNW,wLCGfH,SAASI,QAAQ,cAAcC,iBAC3B,CACI5C,KAAM,uBACN6C,SAAU,OACVC,MAAO,2DACPC,UAAW,iCACXC,iBAAkB,yCAClBC,cAAe,GACfC,MAAO,CACHf,QAAS,CACLgB,KAAM,2B,UCbP,ICGfC,EAA6Bb,SAArBC,EAASY,EAATZ,UAAWa,EAAKD,EAALC,MAEnBb,EAAUC,SAAS,mCAAoC,CACnDC,SDNW,yMCQXY,OAAQ,CACJD,EAAME,UAAU,gBAGpBC,QAAO,WACHC,KAAKC,oBAGTC,QAAS,CACLD,iBAAgB,WACZD,KAAKG,kBAAkB,4BClBpB,ICEfR,EAA6Bb,SAArBC,EAASY,EAATZ,UAAWa,EAAKD,EAALC,MAEnBb,EAAUC,SAAS,0CAA2C,CAC1DC,SDLW,+KCOXY,OAAQ,CACJD,EAAME,UAAU,gBAGpBC,QAAO,WACHC,KAAKC,oBAGTC,QAAS,CACLD,iBAAgB,WACZD,KAAKG,kBAAkB,4B,UCdbrB,SAAdC,UAEEC,SAAS,2CAA4C,CAC3DC,SCNW,2OCIfH,SAASI,QAAQ,cAAckB,mBAC3B,CACI7D,KAAM,uBACN8C,MAAO,4DACPC,UAAW,mCACXe,gBAAiB,0CACjBd,iBAAkB,2CAClBC,cAAe,CACXc,OAAQ,CACJC,OAAQ,SACRtD,MAAO,GACPuD,UAAU,M,UCfX,ICGfb,EAAgCb,SAAxBC,EAASY,EAATZ,UAAW0B,EAAQd,EAARc,SACXC,EAAa5B,SAAS6B,KAAtBD,SAER3B,EAAUC,SAAS,iCAAkC,CACjDC,SDPW,20LCSX2B,OAAQ,CACJ,qBAGJC,KAAI,WACA,MAAO,CACHC,WAAW,EACXC,kBAAkB,EAClBC,0BAA0B,EAC1BC,8BAA+B,KAC/BC,OAAQ,KACRC,cAAe,GACfC,oBAAqB,KAI7BC,SAAQ,WACJ,MAAO,CACHC,MAAOtB,KAAKuB,iBAIpBxB,QAAO,WACHC,KAAKC,oBAGTuB,SAAU,CACNC,uBAAsB,WAClB,OAAOzB,KAAK0B,kBAAkBpE,OAAO,kBAGzCqE,8BAA6B,WACzB,OAAO3B,KAAK0B,kBAAkBpE,OAAO,yBAGzCsE,6BAA4B,WACxB,OAAI5B,KAAKgB,yBACE,KAGJhB,KAAKiB,+BAGhBY,SAAQ,WACJ,OAAQ7B,KAAKgB,2BAIrBc,MAAO,CACHZ,OAAQ,CACJa,QAAO,WACH,IAAMvC,EAAgBQ,KAAKgC,MAAM3B,gBAAgB4B,WAAWC,KACtDC,EAAiBnC,KAAKgC,MAAM3B,gBAAgB+B,uBAG9CpC,KAAKgB,yBADc,OAAnBmB,IACkCnC,KAAKkB,OAAO,qDAEZlB,KAAKkB,OAAO,sDACrC1B,EAAc,oDAG/B6C,MAAM,IAIdnC,QAAS,CACLD,iBAAgB,WAAI,IAADqC,EAAA,KACftC,KAAKc,WAAY,EACjB,IAAIyB,EAAc,EAEZC,EAAW,IAAI9B,EACrB8B,EAASC,UAAU/B,EAASgC,UAAU,SAAU,CAC5CjC,EAASkC,6BACTlC,EAASmC,yBAGb5C,KAAKyB,uBAAuBoB,OAAOL,EAAU1D,SAASgE,QAAQC,KAAKC,MAAK,SAAAC,GACpEA,EAAIpE,IAAI,CACJV,GAAI,KACJ+E,WAAY,CACR3G,KAAM+F,EAAKa,IAAI,iDAIvBb,EAAKnB,cAAgB8B,KACtBG,SAAQ,aACPb,EACkB,IACdD,EAAKxB,WAAY,MAIzB,IAAMuC,EAAiB,IAAI3C,EAC3BV,KAAK2B,8BAA8BkB,OAAOQ,EAAgBvE,SAASgE,QAAQC,KAAKC,MAAK,SAAAC,GACjFX,EAAKlB,oBAAoBkC,KAAK,CAC1BjE,MAAOiD,EAAKa,IAAI,2EAChBlG,MAAO,KAEX,IAAK,IAAIjB,EAAI,EAAGA,EAAIiH,EAAIM,OAAQvH,IAAK,CAAC,IAADwH,EAC7BP,SAAQ,QAALO,EAAHP,EAAMjH,UAAE,IAAAwH,GAARA,EAAUC,KAAOnB,EAAKoB,WAAWT,EAAIjH,GAAGyH,MACxCnB,EAAKlB,oBAAoBkC,KAAK,CAAEjE,MAAO4D,EAAIjH,GAAGyH,IAAKxG,MAAOgG,EAAIjH,GAAGyH,UAG1EL,SAAQ,aACPb,EACkB,IACdD,EAAKxB,WAAY,MAIzBd,KAAKiB,8BAAgC,CACjC1C,KAAM,EACNoF,OAAQ3D,KAAKmD,IAAI,uFAIzBS,OAAM,WACE5D,KAAK6B,UAIT7B,KAAK6D,QAGTA,KAAI,WAAI,IAADC,EAAA,KACH9D,KAAKc,WAAY,EAEjBd,KAAKgC,MAAM3B,gBAAgBwD,OAAOb,MAAK,WACnCc,EAAK/C,kBAAmB,KACzBqC,SAAQ,WACPU,EAAKhD,WAAY,MAIzB4C,WAAU,SAACD,GACP,GAAIA,EACA,IAEI,OADA,IAAIM,IAAIN,IACD,EACT,MAAOO,GACL,OAAO,O,UCrJZ,ICGfrE,EAA2Bb,SAApBC,EAASY,EAATZ,UAAWa,EAAKD,EAALC,MACXc,EAAY5B,SAAS6B,KAArBD,SACCuD,EAASnF,SAASoF,MAAMC,OAAxBF,KAERlF,EAAUC,SACN,qCACA,CACIC,SDVO,qqFCYP2B,OAAQ,CACJ,oBACA,sBACA,iCACA,0BAGJf,OAAQ,CACJD,EAAME,UAAU,iBAGpBe,KAAI,WACA,MAAO,CACHuD,WAAY,KACZC,MAAO,KACPC,+BAAgC,KAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,6BAA6B,EAC7BC,gCAAgC,IAIxCrD,SAAQ,WACJ,MAAO,CACHC,MAAOtB,KAAKuB,iBAIpBC,SAAU,CACNmD,QAAO,WACH,OAAO3E,KAAK4E,eAIpB7E,QAAO,WACHC,KAAKC,oBAGTC,QAAS,CACLD,iBAAgB,WAAI,IAADqC,EAAA,KACftC,KAAKoE,WAAapE,KAAK0B,kBAAkBpE,OAAO,kBAChD0C,KAAK6E,kBAAoB7E,KAAK0B,kBAAkBpE,OAAO,wBAEvD,IAAIwH,EAAuB,IAAIpE,EAC/BoE,EAAqBC,WAAWrE,EAASsE,KAAK,YAAa,QAC3DF,EAAqBrC,UACjB/B,EAASuE,OAAO,sBAAuB,qCAE3C,IAAIC,EAAsBlF,KAAK6E,kBAAkBhC,OAAOiC,EAAsBhG,SAASgE,QAAQC,KAC/FmC,EAAqBlC,MACjB,SAACmC,GACG7C,EAAK8C,YAAcD,KAI3B,IAAIE,EAAkCrF,KAAKsF,uBACtCC,UAAU,uBACfF,EAAgCrC,MAC5B,SAACmC,GACG7C,EAAKkD,SAAWL,KAIxB,IAAIM,EAAa,KACbC,EAAsB1F,KAAKoE,WAAWvB,OACtC,IAAInC,EACJ5B,SAASgE,QAAQC,KAErB2C,EAAoB1C,MAChB,SAACmC,GACGM,EAAaN,KAIrBQ,QAAQC,IAAI,CAACF,EAAqBL,EAAiCH,IAAuBlC,MACtF,WACIV,EAAK+B,MAAQoB,KAIrBzF,KAAK6F,+BACAC,oCACA9C,MACG,SAACmC,GACOA,EAAOtE,KAAKsE,OACZ7C,EAAKgC,+BAAiCL,EAClCkB,EAAOtE,KAAKsE,OACZ,CACIY,KAAM,UACNC,OAAQ,YAIhB1D,EAAKgC,+BAAiChC,EAAKa,IACvC,+EAId8C,OACE,SAACC,GACGC,QAAQD,MACJ,kDACAA,GAGJ5D,EAAK8D,wBAAwB,CACzBC,QAAS/D,EAAKa,IACV,mFAMxByB,WAAU,WACN,MAAO,CACH,CACIjH,SAAU,QACV0B,MAAOW,KAAKmD,IAAI,+DAChBmD,aAAa,EACbC,SAAS,GAEb,CACI5I,SAAU,OACV0B,MAAOW,KAAKmD,IAAI,8DAChBmD,aAAa,GAEjB,CACI3I,SAAU,cACV0B,MAAOW,KAAKmD,IAAI,sEAChBmD,aAAa,GAEjB,CACI3I,SAAU,YACV0B,MAAOW,KAAKmD,IAAI,oEAChBmD,aAAa,KAKzBE,2BAA0B,WACtBxG,KAAK0E,gCAAiC,EACtB1E,KAAK6F,+BAA+BW,6BAE5CxD,KAAK,SAAUyD,GACnBzG,KAAK0E,gCAAiC,EAClC+B,EAAS5F,KAAK6F,OAAS,EACvB1G,KAAK2G,0BAA0B,CAC3BN,QAASrG,KAAKmD,IACV,6EAGDsD,EAAS5F,KAAK6F,MAAQ,GAAKD,EAAS5F,KAAK6F,QAAUD,EAAS5F,KAAK+F,QACxE5G,KAAK2G,0BAA0B,CAC3BN,QAASrG,KAAKmD,IACV,gFAGDsD,EAAS5F,KAAK6F,MAAQ,GAAKD,EAAS5F,KAAK+F,QAAU,GAAKH,EAAS5F,KAAK6F,MAAQD,EAAS5F,KAAK+F,QACnG5G,KAAK6G,0BAA0B,CAC3BR,QAASrG,KAAKmD,IACV,gFAIRnD,KAAK6G,0BAA0B,CAC3BR,QAASrG,KAAKmD,IACV,gFAId3F,KAAKwC,OAAOiG,MAAM,SAAUC,GAC1BlG,KAAK0E,gCAAiC,OACAoC,IAAlCZ,EAAMO,SAAS5F,KAAKkG,WACpBZ,QAAQD,MACJ,uDACEA,EAAMO,SAAS5F,KAAKkG,WAI9B/G,KAAKoG,wBAAwB,CACzBC,QAASrG,KAAKmD,IACV,gFAGV3F,KAAKwC,QAGXgH,wBAAuB,WACHhH,KAAKiH,oBAAoBD,0BAEjChE,KAAK,SAAUyD,GACfA,EAAS5F,KAAKqG,YACdlH,KAAK2G,0BAA0B,CAC3BN,QAASrG,KAAKmD,IACV,yFAG2B,uCAA5BsD,EAAS5F,KAAKkG,UACrB/G,KAAK6G,0BAA0B,CAC3BR,QAASrG,KAAKmD,IACV,4FAIRnD,KAAK6G,0BAA0B,CAC3BR,QAASrG,KAAKmD,IACV,oGAId3F,KAAKwC,OAAOiG,MAAM,SAAUC,QACYY,IAAlCZ,EAAMO,SAAS5F,KAAKkG,WACpBZ,QAAQD,MACJ,+DACEA,EAAMO,SAAS5F,KAAKkG,WAI9B/G,KAAKoG,wBAAwB,CACzBC,QAASrG,KAAKmD,IACV,yFAGV3F,KAAKwC,QAGXmH,mBAAkB,SAACC,GACf,IAAMC,EAAUrH,KAAKiH,oBAAoBE,mBAAmBC,EAAKjJ,IACjE6B,KAAKsH,uBAAuB,CACxBjB,QAASrG,KAAKmD,IACV,iFAIRkE,EAAQrE,KAAK,SAAUyD,GACfA,EAAS5F,KAAK0G,UACdvH,KAAK2G,0BAA0B,CAC3BN,QAASrG,KAAKmD,IACV,+EAG2B,mBAA5BsD,EAAS5F,KAAKkG,UACrB/G,KAAK6G,0BAA0B,CAC3BR,QAASrG,KAAKmD,IACV,sFAIRnD,KAAKoG,wBAAwB,CACzBC,QAASrG,KAAKmD,IACV,uEAId3F,KAAKwC,OAAOiG,MAAM,SAAUC,QACYY,IAAlCZ,EAAMO,SAAS5F,KAAKkG,WACpBZ,QAAQD,MACJ,qDACEA,EAAMO,SAAS5F,KAAKkG,WAI9B/G,KAAKoG,wBAAwB,CACzBC,QAASrG,KAAKmD,IACV,+EAGV3F,KAAKwC,QAEXwH,gBAAe,SAACvK,GACZ,GAAgC,IAA5B+C,KAAKoF,YAAY7B,OACjB,OAAO,KAGX,GAAIvD,KAAKyH,kBAAoBzH,KAAKyH,iBAAiBxK,EAAMkB,IACrD,OAAO6B,KAAKyH,iBAAiBxK,EAAMkB,IAGvC,IAAIuJ,EAAoB,KAClBC,EAAe3H,KAAKwF,SAAS,6CACnC,IAAK,IAAIoC,KAAcD,EACnB,GAAI1K,EAAM4K,cAAgBF,EAAaC,IAAeD,EAAaC,GAAa,CAC5EF,EAAoBE,EACpB,MAIR,IAAIE,EAAe,KACfJ,GAA2C,YAAtBA,IACrBI,EAAe9H,KAAKoF,YAAY2C,MAC5B,SAAAC,GACI,OAAOA,EAAQJ,aAAeF,MAKrCI,IACDA,EAAe9H,KAAKoF,YAAY,IAGpC,IAAI6C,EAAYH,EAAarE,IACvByE,EAAmBlI,KAAKwF,SAAS,iDACnC0C,IACAD,EAAYC,GAGhB,IAAMC,EAAanI,KAAKwF,SAAS,2CACjC,GAAI2C,GAAcT,EACd,IAAK,IAAIE,KAAcO,EACnB,GAAIT,GAAsBA,GAAqBS,EAAWP,GAAa,CACnEK,EAAYE,EAAWP,GACvB,MAKZ,IAAIQ,EAAU,GAAAC,OAAMpL,EAAMqL,MAEpB7E,EAAMwE,EAAUM,QAAQ,MAAO,IAC/B,IACAH,EAAWG,QAAQ,MAAO,IAOhC,OALKvI,KAAKyH,mBACNzH,KAAKyH,iBAAmB,IAE5BzH,KAAKyH,iBAAiBxK,EAAMkB,IAAMsF,EAE3BA,GAEX+E,kCAAiC,WAC7BxI,KAAKuE,gCAAiC,EACtCvE,KAAKwE,mCAAoC,GAE7CiE,kCAAiC,WAC7BzI,KAAKyE,6BAA8B,EACnCzE,KAAK0E,gCAAiC,MC1VhC5F,SAAdC,UAEEC,SAAS,6BAA8B,CAC7CC,SCLW,8+BCAA,ICEPF,EAAcD,SAAdC,UACA2B,EAAa5B,SAAS6B,KAAtBD,SAER3B,EAAUC,SAAS,0CAA2C,CAC1DC,SDNW,s/NCQX2B,OAAQ,CACJ,qBAGJ8H,MAAO,CACHC,iBAAkB,CACdjJ,KAAMhD,OACN8D,UAAU,GAEdyB,WAAY,CACRvC,KAAMhD,OACN8D,UAAU,GAEd4B,uBAAwB,CACpB1C,KAAMkJ,OACNpI,UAAU,EACV7B,QAAS,MAEbiD,6BAA8B,CAC1BlC,KAAMhD,OACN8D,UAAU,EACV7B,QAAS,MAEbqC,yBAA0B,CACtBtB,KAAMmJ,QACNrI,UAAU,GAEdY,oBAAqB,CACjB1B,KAAMhD,OACN8D,UAAU,EACV7B,QAAS,KAIjBkC,KAAI,WACA,MAAO,CAEHiI,kBAAmB,4CACnBC,gBAAiB,0CAEjBjI,WAAW,EACXkI,gBAAiB,KAIzBjJ,QAAO,WACHC,KAAKC,oBAGTuB,SAAU,CACNyH,mBAAkB,WACd,OAAOjJ,KAAK0B,kBAAkBpE,OAAO,aAGzCqK,aAAc,CACV9K,IAAK,WACD,OAAOmD,KAAKiC,WAAWjC,KAAKoC,wBAAwBpC,KAAK8I,oBAAsB,KAIvFX,WAAY,CACRtL,IAAK,WACD,OAAOmD,KAAKiC,WAAWjC,KAAKoC,wBAAwBpC,KAAK+I,kBAAoB,MAKzF7I,QAAS,CACLD,iBAAgB,WAAI,IAADqC,EAAA,KACftC,KAAKc,WAAY,EAEjB,IAAM0B,EAAW,IAAI9B,EACrB8B,EAASuC,WAAWrE,EAASsE,KAAK,YAAa,QAE/ChF,KAAKiJ,mBAAmBpG,OAAOL,EAAU1D,SAASgE,QAAQC,KAAKC,MAAK,SAAAmC,GAChE7C,EAAK0G,gBAAkB7D,EACvB7C,EAAK4G,wBACN9F,SAAQ,WACPd,EAAKxB,WAAY,MAIzBoI,mBAAkB,iBAG+DpC,IAAzE9G,KAAKiC,WAAWjC,KAAKoC,wBAAwBpC,KAAK8I,oBAClDK,MAAMC,QAAQpJ,KAAKiC,WAAWjC,KAAKoC,wBAAwBpC,KAAK8I,sBAMhE9I,KAAKqJ,KAAKrJ,KAAKiC,WAAWjC,KAAKoC,wBAAyBpC,KAAK8I,kBAAmB,UAGThC,IAAvE9G,KAAKiC,WAAWjC,KAAKoC,wBAAwBpC,KAAK+I,kBAClDI,MAAMC,QAAQpJ,KAAKiC,WAAWjC,KAAKoC,wBAAwBpC,KAAK+I,oBAEhE/I,KAAKqJ,KAAKrJ,KAAKiC,WAAWjC,KAAKoC,wBAAyBpC,KAAK+I,gBAAiB,KAItFO,0BAAyB,SAACrM,GACtB,MAAqB,iBAAVA,GAIJA,EAAMsG,QAAU,M,+hCCjHbzE,SAAdC,UAEEC,SAAS,yCAA0C,CACzDC,SCLW,6xKDOXyJ,MAAO,CACHC,iBAAkB,CACdjJ,KAAMhD,OACN8D,UAAU,GAEdyB,WAAY,CACRvC,KAAMhD,OACN8D,UAAU,GAEd4B,uBAAwB,CACpB1C,KAAMkJ,OACNpI,UAAU,EACV7B,QAAS,OAIjBoB,QAAO,WACHC,KAAKC,oBAGTC,QAAS,CACLD,iBAAgB,WAUZ,IATA,IAAMsJ,EAAe,gCASrBC,EAAA,EAAAC,EAAkC/M,OAAOgN,QARpB,CACbC,iCAAkC,GAClCC,kBAAmB,OAMqCJ,EAAAC,EAAAlG,OAAAiG,IAAE,CAA7D,IAAAK,EAAAC,EAAAL,EAAAD,GAAA,GAAOjM,EAAGsM,EAAA,GAAEE,EAAYF,EAAA,QAC2B/C,IAAhD9G,KAAKiC,WAAiB,KAAEsH,EAAehM,IACvCyC,KAAKqJ,KAAKrJ,KAAKiC,WAAiB,KAAGsH,EAAehM,EAAKwM,KAKnET,0BAAyB,SAACrM,GACtB,MAAqB,iBAAVA,GAIJA,EAAMsG,QAAU,M,gBE1ChBzE,SAAXkL,OAEDhL,SAAS,wBAAyB,CACrCU,KAAM,SACNnD,KAAM,wBACN+E,MAAO,mDACP2I,YAAa,wDACbC,MAAO,UACPC,KAAM,cAENC,SAAU,CACN,QAASC,GAGbC,OAAQ,CACJ,SAAY,CACRhL,UAAW,iCACXgJ,KAAM,WACNiC,KAAM,CACFC,WAAY,8BAGpB,aAAc,CACVlL,UAAW,qCACXgJ,KAAM,eAIdmC,WAAY,CACR,CACItM,GAAI,gCACJkB,MAAO,0CACP6K,MAAO,UACPC,KAAM,cACNO,OAAQ,aACRC,SAAU,KAEd,CACItL,MAAO,kDACP6K,MAAO,UACPC,KAAM,mBACN7B,KAAM,mCACNoC,OAAQ,gCACRC,SAAU,MAIlBC,aAAc,CACVC,MAAO,UACPC,GAAI,iCACJC,cAAe,6BACfC,mBAAmB,KC3DZ,IACLC,EADK,GACLA,EAAUC,WAED1M,OAAO2M,QAAO,SAACC,EAAahE,GACvC,IACM9H,EAAY,CACd/C,KAFkB6K,EAAKiE,MAAM,KAAK,GAAGA,MAAM,KAAK,GAGhDC,YAAY,EACZC,OAAM,SAACC,EAAeC,GAClB,IAAM5K,EAAO4K,EAAe5K,KAE5B,OAAO2K,EAAc,OAAQ,CACzBE,MAAO,CAAC7K,EAAK8K,YAAa9K,EAAK6K,OAC/BE,MAAO/K,EAAK+K,MACZC,MAAOhL,EAAKgL,MACZC,GAAIjL,EAAKiL,GACTC,SAAU,CACNC,UAAWf,EAAQ7D,QAOnC,OADAgE,EAAY9H,KAAKhE,GACV8L,IACR,ICvBCrM,EAAcD,SAAdC,UAGGkN,EAAejO,KAAI,SAACsB,GACvB,OAAOP,EAAUC,SAASM,EAAU/C,KAAM+C,M,gtBCoBnC4M,EA1BU,WACrB,SAAAA,EAAYC,EAAYC,I,4FAAcC,CAAA,KAAAH,GAClClM,KAAKmM,WAAaA,EAClBnM,KAAKoM,aAAeA,EACpBpM,KAAKzD,KAAO,sB,UAmBf,O,EAlBA2P,G,EAAA,EAAA3O,IAAA,0BAAAN,MAED,WACI,IAAMqP,EAAUtM,KAAKuM,aACrB,OAAOvM,KAAKmM,WAAWK,KAAK,qDAAsD,GAAI,CAAEF,cAC3F,CAAA/O,IAAA,qBAAAN,MAED,SAAmBwP,GACf,IAAMH,EAAUtM,KAAKuM,aACrB,OAAOvM,KAAKmM,WAAWK,KAAK,uCAAuCC,EAAQ,GAAI,CAAEH,cACpF,CAAA/O,IAAA,aAAAN,MAED,WACI,MAAO,CACHyP,OAAQ,mBACRC,cAAc,UAADtE,OAAYrI,KAAKoM,aAAaQ,YAC3C,eAAgB,yB,8EAEvBV,EAvBoB,G,4sBCEzBpN,SAASI,UAAUF,SAAS,uBAAuB,SAAC6N,GAChD,IAAMC,EAAgBhO,SAASiO,YAAYC,aAAa,QACxD,OAAO,IAAId,EAAoBY,EAAcX,WAAYU,EAAUT,iB,ICsBxDF,EA1BU,WACrB,SAAAA,EAAYC,EAAYC,I,4FAAcC,CAAA,KAAAH,GAClClM,KAAKmM,WAAaA,EAClBnM,KAAKoM,aAAeA,EACpBpM,KAAKzD,KAAO,sB,UAmBf,O,EAlBA2P,G,EAAA,EAAA3O,IAAA,oCAAAN,MAED,WACI,IAAMqP,EAAUtM,KAAKuM,aACrB,OAAOvM,KAAKmM,WAAWtP,IAAI,iEAAkE,GAAI,CAAEyP,cACtG,CAAA/O,IAAA,6BAAAN,MAED,WACI,IAAMqP,EAAUtM,KAAKuM,aACrB,OAAOvM,KAAKmM,WAAWtP,IAAI,mEAAoE,GAAI,CAAEyP,cACxG,CAAA/O,IAAA,aAAAN,MAED,WACI,MAAO,CACHyP,OAAQ,mBACRC,cAAc,UAADtE,OAAYrI,KAAKoM,aAAaQ,YAC3C,eAAgB,yB,8EAEvBV,EAvBoB,GCEzBpN,SAASI,UAAUF,SAAS,kCAAkC,SAAC6N,GAC3D,IAAMC,EAAgBhO,SAASiO,YAAYC,aAAa,QACxD,OAAO,IAAIC,EAA+BH,EAAcX,WAAYU,EAAUT,kB,2iHCAnE,SAASc,EAAcC,EAAUC,GAG9C,IAFA,IAAIC,EAAS,GACTC,EAAY,GACPtR,EAAI,EAAGA,EAAIoR,EAAK7J,OAAQvH,IAAK,CACpC,IAAIoL,EAAOgG,EAAKpR,GACZmC,EAAKiJ,EAAK,GAIVmG,EAAO,CACTpP,GAAIgP,EAAW,IAAMnR,EACrBwR,IALQpG,EAAK,GAMbqG,MALUrG,EAAK,GAMfsG,UALctG,EAAK,IAOhBkG,EAAUnP,GAGbmP,EAAUnP,GAAIwP,MAAMrK,KAAKiK,GAFzBF,EAAO/J,KAAKgK,EAAUnP,GAAM,CAAEA,GAAIA,EAAIwP,MAAO,CAACJ,KAKlD,OAAOF,E,+CCjBT,IAAIO,EAAkC,oBAAbC,SAEzB,GAAqB,oBAAVC,OAAyBA,QAC7BF,EACH,MAAM,IAAItP,MACV,2JAkBJ,IAAIyP,EAAc,GAQdC,EAAOJ,IAAgBC,SAASG,MAAQH,SAASI,qBAAqB,QAAQ,IAC9EC,EAAmB,KACnBC,EAAmB,EACnBC,GAAe,EACfC,EAAO,aACPC,EAAU,KACVC,EAAW,kBAIXC,EAA+B,oBAAdC,WAA6B,eAAeC,KAAKD,UAAUE,UAAUC,eAE3E,SAASC,EAAiB1B,EAAUC,EAAM0B,EAAeC,GACtEX,EAAeU,EAEfR,EAAUS,GAAY,GAEtB,IAAI1B,EAASH,EAAaC,EAAUC,GAGpC,OAFA4B,EAAe3B,GAER,SAAiB4B,GAEtB,IADA,IAAIC,EAAY,GACPlT,EAAI,EAAGA,EAAIqR,EAAO9J,OAAQvH,IAAK,CACtC,IAAIoL,EAAOiG,EAAOrR,IACdmT,EAAWpB,EAAY3G,EAAKjJ,KACvBiR,OACTF,EAAU5L,KAAK6L,GAEbF,EAEFD,EADA3B,EAASH,EAAaC,EAAU8B,IAGhC5B,EAAS,GAEX,IAASrR,EAAI,EAAGA,EAAIkT,EAAU3L,OAAQvH,IAAK,CACzC,IAAImT,EACJ,GAAsB,KADlBA,EAAWD,EAAUlT,IACZoT,KAAY,CACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAASxB,MAAMpK,OAAQ8L,IACzCF,EAASxB,MAAM0B,YAEVtB,EAAYoB,EAAShR,OAMpC,SAAS6Q,EAAgB3B,GACvB,IAAK,IAAIrR,EAAI,EAAGA,EAAIqR,EAAO9J,OAAQvH,IAAK,CACtC,IAAIoL,EAAOiG,EAAOrR,GACdmT,EAAWpB,EAAY3G,EAAKjJ,IAChC,GAAIgR,EAAU,CACZA,EAASC,OACT,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAASxB,MAAMpK,OAAQ8L,IACzCF,EAASxB,MAAM0B,GAAGjI,EAAKuG,MAAM0B,IAE/B,KAAOA,EAAIjI,EAAKuG,MAAMpK,OAAQ8L,IAC5BF,EAASxB,MAAMrK,KAAKgM,EAASlI,EAAKuG,MAAM0B,KAEtCF,EAASxB,MAAMpK,OAAS6D,EAAKuG,MAAMpK,SACrC4L,EAASxB,MAAMpK,OAAS6D,EAAKuG,MAAMpK,YAEhC,CACL,IAAIoK,EAAQ,GACZ,IAAS0B,EAAI,EAAGA,EAAIjI,EAAKuG,MAAMpK,OAAQ8L,IACrC1B,EAAMrK,KAAKgM,EAASlI,EAAKuG,MAAM0B,KAEjCtB,EAAY3G,EAAKjJ,IAAM,CAAEA,GAAIiJ,EAAKjJ,GAAIiR,KAAM,EAAGzB,MAAOA,KAK5D,SAAS4B,IACP,IAAIC,EAAe3B,SAASrC,cAAc,SAG1C,OAFAgE,EAAa9P,KAAO,WACpBsO,EAAKyB,YAAYD,GACVA,EAGT,SAASF,EAAUI,GACjB,IAAIC,EAAQC,EACRJ,EAAe3B,SAASgC,cAAc,SAAWtB,EAAW,MAAQmB,EAAIvR,GAAK,MAEjF,GAAIqR,EAAc,CAChB,GAAIpB,EAGF,OAAOC,EAOPmB,EAAaM,WAAWC,YAAYP,GAIxC,GAAIhB,EAAS,CAEX,IAAIwB,EAAa7B,IACjBqB,EAAetB,IAAqBA,EAAmBqB,KACvDI,EAASM,EAAoBzS,KAAK,KAAMgS,EAAcQ,GAAY,GAClEJ,EAASK,EAAoBzS,KAAK,KAAMgS,EAAcQ,GAAY,QAGlER,EAAeD,IACfI,EAASO,EAAW1S,KAAK,KAAMgS,GAC/BI,EAAS,WACPJ,EAAaM,WAAWC,YAAYP,IAMxC,OAFAG,EAAOD,GAEA,SAAsBS,GAC3B,GAAIA,EAAQ,CACV,GAAIA,EAAO3C,MAAQkC,EAAIlC,KACnB2C,EAAO1C,QAAUiC,EAAIjC,OACrB0C,EAAOzC,YAAcgC,EAAIhC,UAC3B,OAEFiC,EAAOD,EAAMS,QAEbP,KAKN,IACMQ,EADFC,GACED,EAAY,GAET,SAAUE,EAAOC,GAEtB,OADAH,EAAUE,GAASC,EACZH,EAAUI,OAAO3H,SAAS4H,KAAK,QAI1C,SAASR,EAAqBT,EAAcc,EAAOV,EAAQF,GACzD,IAAIlC,EAAMoC,EAAS,GAAKF,EAAIlC,IAE5B,GAAIgC,EAAakB,WACflB,EAAakB,WAAWC,QAAUN,EAAYC,EAAO9C,OAChD,CACL,IAAIoD,EAAU/C,SAASgD,eAAerD,GAClCsD,EAAatB,EAAasB,WAC1BA,EAAWR,IAAQd,EAAaO,YAAYe,EAAWR,IACvDQ,EAAWvN,OACbiM,EAAauB,aAAaH,EAASE,EAAWR,IAE9Cd,EAAaC,YAAYmB,IAK/B,SAASV,EAAYV,EAAcE,GACjC,IAAIlC,EAAMkC,EAAIlC,IACVC,EAAQiC,EAAIjC,MACZC,EAAYgC,EAAIhC,UAiBpB,GAfID,GACF+B,EAAawB,aAAa,QAASvD,GAEjCa,EAAQ2C,OACVzB,EAAawB,aAAazC,EAAUmB,EAAIvR,IAGtCuP,IAGFF,GAAO,mBAAqBE,EAAUwD,QAAQ,GAAK,MAEnD1D,GAAO,uDAAyD2D,KAAKC,SAASC,mBAAmBC,KAAKC,UAAU7D,MAAgB,OAG9H8B,EAAakB,WACflB,EAAakB,WAAWC,QAAUnD,MAC7B,CACL,KAAOgC,EAAagC,YAClBhC,EAAaO,YAAYP,EAAagC,YAExChC,EAAaC,YAAY5B,SAASgD,eAAerD,O,mECxNrD,IAAI9O,EAAU,EAAQ,QACnBA,EAAQtB,aAAYsB,EAAUA,EAAQC,SACnB,iBAAZD,IAAsBA,EAAU,CAAC,CAAC3C,EAAOC,EAAI0C,EAAS,MAC7DA,EAAQE,SAAQ7C,EAAOD,QAAU4C,EAAQE,SAG/BC,EADH,EAAQ,QAAyJF,SAC1J,WAAYD,GAAS,EAAM,K,mBCT5C3C,EAAOD,QAAU,orB,4CCGjB,IAAI4C,EAAU,EAAQ,QACnBA,EAAQtB,aAAYsB,EAAUA,EAAQC,SACnB,iBAAZD,IAAsBA,EAAU,CAAC,CAAC3C,EAAOC,EAAI0C,EAAS,MAC7DA,EAAQE,SAAQ7C,EAAOD,QAAU4C,EAAQE,SAG/BC,EADH,EAAQ,QAAyJF,SAC1J,WAAYD,GAAS,EAAM,K,qBCN5C,IAAIA,EAAU,EAAQ,QACnBA,EAAQtB,aAAYsB,EAAUA,EAAQC,SACnB,iBAAZD,IAAsBA,EAAU,CAAC,CAAC3C,EAAOC,EAAI0C,EAAS,MAC7DA,EAAQE,SAAQ7C,EAAOD,QAAU4C,EAAQE,SAG/BC,EADH,EAAQ,QAAyJF,SAC1J,WAAYD,GAAS,EAAM,K","file":"static/js/styla-cms-integration.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bundles/stylacmsintegration/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"96jx\");\n","var map = {\n\t\"./icons-styla-plugin-settings.svg\": \"Zk0C\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"+RN2\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./styles.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0098480b\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./styles.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"93d09b48\", content, true, {});","import template from './cms-block-styla-module-content.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('cms-block-styla-module-content', {\n    template\n});\n","export default \"<div class=\\\"cms-block-styla-module-content\\\">\\n    <slot name=\\\"content\\\">\\n    </slot>\\n</div>\\n\";","import template from './cms-block-styla-module-content-preview.html.twig';\nimport './styles.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('cms-block-styla-module-content-preview', {\n    template\n});\n","export default \"<div>\\n    <img class=\\\"cms-block-styla-module-content-preview-image\\\" :src=\\\"'stylacmsintegrationplugin/administration/static/img/shopware-6-styla-module.png' | asset\\\"/>\\n</div>\\n\";","import './component';\nimport './preview';\n\nShopware.Service('cmsService').registerCmsBlock(\n    {\n        name: 'styla-module-content',\n        category: 'text',\n        label: 'styla-cms-integration-plugin.blocks.module-content.label',\n        component: 'cms-block-styla-module-content',\n        previewComponent: 'cms-block-styla-module-content-preview',\n        defaultConfig: {},\n        slots: {\n            content: {\n                type: 'styla-module-content'\n            }\n        }\n    }\n);\n","export default \"<div class=\\\"cms-element-styla-module-content\\\">\\n    <h2>\\n        {{ $tc('styla-cms-integration-plugin.element.module-content.text', 0, {'id': element.config.slotId.value}) }}\\n    </h2>\\n</div>\\n\";","import template from './cms-element-styla-module-content.html.twig';\nimport './styles.scss';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('cms-element-styla-module-content', {\n    template,\n\n    mixins: [\n        Mixin.getByName('cms-element')\n    ],\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.initElementConfig('styla-module-content');\n        }\n    }\n});\n","export default \"<sw-field v-model=\\\"element.config.slotId.value\\\"\\n          :label=\\\"$tc('styla-cms-integration-plugin.element.module-content.configuration.slot-id.label')\\\">\\n</sw-field>\\n\";","import template from './cms-element-styla-module-content-config.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('cms-element-styla-module-content-config', {\n    template,\n\n    mixins: [\n        Mixin.getByName('cms-element')\n    ],\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.initElementConfig('styla-module-content');\n        }\n    }\n});\n","import template from './cms-element-styla-module-content-preview.html.twig';\nimport './styles.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('cms-element-styla-module-content-preview', {\n    template\n});\n","export default \"<div class=\\\"cms-element-styla-module-content-preview\\\">\\n    <img class=\\\"cms-element-styla-module-content-preview-image\\\" :src=\\\"'stylacmsintegrationplugin/administration/static/img/shopware-6-styla-module.png' | asset\\\"/>\\n</div>\\n\";","import './component';\nimport './config';\nimport './preview';\n\nShopware.Service('cmsService').registerCmsElement(\n    {\n        name: 'styla-module-content',\n        label: 'styla-cms-integration-plugin.element.module-content.label',\n        component: 'cms-element-styla-module-content',\n        configComponent: 'cms-element-styla-module-content-config',\n        previewComponent: 'cms-element-styla-module-content-preview',\n        defaultConfig: {\n            slotId: {\n                source: 'static',\n                value: '',\n                required: true\n            }\n        }\n    }\n);\n","export default \"{% block styla_cmsintegration %}\\n    <sw-page class=\\\"styla-cmsintegration-settings\\\">\\n        {% block styla_cmsintegration_header %}\\n            <template #smart-bar-header>\\n                <h2>\\n                    {{ $tc('sw-settings.index.title') }}\\n                    <sw-icon name=\\\"solid-long-arrow-right\\\" small></sw-icon>\\n                    {{ $tc('styla-cms-integration-plugin.configuration.header') }}\\n                </h2>\\n            </template>\\n        {% endblock %}\\n        {% block styla_cmsintegration_actions %}\\n            <template #smart-bar-actions>\\n                {% block styla_cmsintegration_actions_save %}\\n                    <sw-button-process v-model=\\\"isSaveSuccessful\\\"\\n                                       class=\\\"sw-settings-login-registration__save-action\\\"\\n                                       variant=\\\"primary\\\"\\n                                       :isLoading=\\\"isLoading\\\"\\n                                       :disabled=\\\"isLoading\\\"\\n                                       @click=\\\"onSave\\\">\\n                        {{ $tc('global.default.save') }}\\n                    </sw-button-process>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n        {% block styla_cmsintegration_content %}\\n            <template #content>\\n                {% block styla_cmsintegration_content_card %}\\n                    <sw-card-view>\\n                        {% block styla_cmsintegration_content_card_channel_config %}\\n                            <sw-sales-channel-config v-model=\\\"config\\\"\\n                                                     ref=\\\"configComponent\\\"\\n                                                     domain=\\\"StylaCmsIntegration.settings\\\">\\n                                {% block styla_cmsintegration_content_card_channel_config_sales_channel %}\\n                                    <template #select=\\\"{ onInput, selectedSalesChannelId }\\\">\\n                                        {% block styla_cmsintegration_content_card_channel_config_sales_channel_card %}\\n                                            <sw-card class=\\\"sw-card--grid\\\"\\n                                                     :title=\\\"$tc('global.entities.sales_channel', 2)\\\">\\n                                                <div class=\\\"card-container\\\">\\n                                                    {% block styla_cmsintegration_content_card_channel_config_sales_channel_card_title %}\\n                                                        <sw-single-select v-model=\\\"selectedSalesChannelId\\\"\\n                                                                          labelProperty=\\\"translated.name\\\"\\n                                                                          valueProperty=\\\"id\\\"\\n                                                                          :isLoading=\\\"isLoading\\\"\\n                                                                          :options=\\\"salesChannels\\\"\\n                                                                          @change=\\\"onInput\\\">\\n                                                        </sw-single-select>\\n                                                    {% endblock %}\\n                                                </div>\\n                                            </sw-card>\\n                                        {% endblock %}\\n                                    </template>\\n                                {% endblock %}\\n                                {% block styla_cmsintegration_content_card_channel_config_cards %}\\n                                    <template #content=\\\"{ actualConfigData, allConfigs, selectedSalesChannelId }\\\">\\n                                        <div v-if=\\\"actualConfigData\\\">\\n                                            {% block styla_cmsintegration_content_card_channel_config_accounts %}\\n                                                <styla-cms-integration-settings-accounts\\n                                                    :actualConfigData=\\\"actualConfigData\\\"\\n                                                    :allConfigs=\\\"allConfigs\\\"\\n                                                    :selectedSalesChannelId=\\\"selectedSalesChannelId\\\"\\n                                                    :defaultAccountNameErrorState=\\\"defaultAccountNameErrorState\\\"\\n                                                    :defaultAccountNameFilled=\\\"defaultAccountNameFilled\\\"\\n                                                    :salesChannelDomains=\\\"salesChannelDomains\\\"\\n                                                >\\n                                                </styla-cms-integration-settings-accounts>\\n                                            {% endblock %}\\n                                            {% block styla_cmsintegration_content_card_channel_config_general %}\\n                                                <styla-cms-integration-settings-general\\n                                                    :actualConfigData=\\\"actualConfigData\\\"\\n                                                    :allConfigs=\\\"allConfigs\\\"\\n                                                    :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                                </styla-cms-integration-settings-general>\\n                                            {% endblock %}\\n                                        </div>\\n                                    </template>\\n                                {% endblock %}\\n                            </sw-sales-channel-config>\\n                        {% endblock %}\\n                        {% block styla_cmsintegration_content_card_loading %}\\n                            <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                        {% endblock %}\\n                    </sw-card-view>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n    </sw-page>\\n{% endblock %}\\n\";","import template from './styla-cms-integration-settings.html.twig';\nimport './styla-cms-integration-settings.scss';\n\nconst { Component, Defaults } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('styla-cms-integration-settings', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            defaultAccountNameFilled: false,\n            messageAccountBlankErrorState: null,\n            config: null,\n            salesChannels: [],\n            salesChannelDomains: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle()\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        salesChannelDomainsRepository() {\n            return this.repositoryFactory.create('sales_channel_domain');\n        },\n\n        defaultAccountNameErrorState() {\n            if (this.defaultAccountNameFilled) {\n                return null;\n            }\n\n            return this.messageAccountBlankErrorState;\n        },\n\n        hasError() {\n            return !this.defaultAccountNameFilled;\n        }\n    },\n\n    watch: {\n        config: {\n            handler() {\n                const defaultConfig = this.$refs.configComponent.allConfigs.null;\n                const salesChannelId = this.$refs.configComponent.selectedSalesChannelId;\n\n                if (salesChannelId === null) {\n                    this.defaultAccountNameFilled = !!this.config['StylaCmsIntegration.settings.defaultAccountName'];\n                } else {\n                    this.defaultAccountNameFilled = !!this.config['StylaCmsIntegration.settings.defaultAccountName']\n                        || !!defaultConfig['StylaCmsIntegration.settings.defaultAccountName'];\n                }\n            },\n            deep: true,\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n            let doneLoading = 0;\n\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equalsAny('typeId', [\n                Defaults.storefrontSalesChannelTypeId,\n                Defaults.apiSalesChannelTypeId,\n            ]));\n\n            this.salesChannelRepository.search(criteria, Shopware.Context.api).then(res => {\n                res.add({\n                    id: null,\n                    translated: {\n                        name: this.$tc('sw-sales-channel-switch.labelDefaultOption'),\n                    },\n                });\n\n                this.salesChannels = res;\n            }).finally(() => {\n                doneLoading++;\n                if (doneLoading > 1) {\n                    this.isLoading = false;\n                }\n            });\n\n            const domainCriteria = new Criteria();\n            this.salesChannelDomainsRepository.search(domainCriteria, Shopware.Context.api).then(res => {\n                this.salesChannelDomains.push({\n                    label: this.$tc('styla-cms-integration-plugin.configuration.field.domainUrls.no_override'),\n                    value: ''\n                });\n                for (let i = 0; i < res.length; i++) {\n                    if (res?.[i]?.url && this.isValidUrl(res[i].url)) {\n                        this.salesChannelDomains.push({ label: res[i].url, value: res[i].url });\n                    }\n                }\n            }).finally(() => {\n                doneLoading++;\n                if (doneLoading > 1) {\n                    this.isLoading = false;\n                }\n            });\n\n            this.messageAccountBlankErrorState = {\n                code: 1,\n                detail: this.$tc('styla-cms-integration-plugin.configuration.field.accountNames.default.error.empty'),\n            };\n        },\n\n        onSave() {\n            if (this.hasError) {\n                return;\n            }\n\n            this.save();\n        },\n\n        save() {\n            this.isLoading = true;\n\n            this.$refs.configComponent.save().then(() => {\n                this.isSaveSuccessful = true;\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        isValidUrl(url) {\n            if (url) {\n                try {\n                    new URL(url);\n                    return true;\n                } catch (err) {\n                    return false;\n                }\n            }\n            false;\n        },\n    }\n});\n","export default \"{% block styla_pages_listing %}\\n    <sw-page class=\\\"overdose-contact-list\\\">\\n        <template #smart-bar-actions> {# slots check vue.js documentation #}\\n            <div v-if=\\\"lastSuccessSynchronizationDate\\\" style=\\\"margin-top: 10px\\\">\\n                <sw-label variant=\\\"info\\\" :dismissable=\\\"false\\\">\\n                    {{ $tc('styla-cms-integration-plugin.actions.get-last-success-date.text', 0, {'dateTime': lastSuccessSynchronizationDate}) }}\\n                    <sw-button-process id=\\\"reset-sync-button\\\" variant=\\\"ghost\\\" size=\\\"x-small\\\"\\n                        style=\\\"padding:0 5px;line-height:12px;font-size:8px;\\\"\\n                        :isLoading=\\\"resetSynchronizationProcessing\\\"\\n                        :processSuccess=\\\"resetSynchronizationSuccess\\\"\\n                        @process-finish=\\\"resetTheResetSynchronizationState\\\"\\n                        @click=\\\"resetSynchronizationStatus\\\"\\n                    >\\n                        {{ $tc('styla-cms-integration-plugin.actions.reset-synchronization.button.label') }}\\n                    </sw-button-process>\\n                </sw-label>\\n            </div>\\n            <sw-button-process variant=\\\"ghost\\\"\\n                               :isLoading=\\\"scheduleSynchronizationProcessing\\\"\\n                               :processSuccess=\\\"scheduleSynchronizationSuccess\\\"\\n                               @process-finish=\\\"resetScheduleSynchronizationState\\\"\\n                               @click=\\\"scheduleSynchronization\\\"\\n            >\\n                {{ $tc('styla-cms-integration-plugin.actions.schedule-pages-synchronization.button.label') }}\\n            </sw-button-process>\\n        </template>\\n        <template #content>\\n            <sw-entity-listing\\n                v-if=\\\"pages\\\"\\n                :items=\\\"pages\\\"\\n                :repository=\\\"repository\\\"\\n                :showSelection=\\\"false\\\"\\n                :allowColumnEdit=\\\"false\\\"\\n                :allowDelete=\\\"false\\\"\\n                :allowEdit=\\\"false\\\"\\n                :columns=\\\"columns\\\">\\n                <template #actions=\\\"{ item }\\\">\\n                    <sw-context-menu-item @click=\\\"refreshPageDetails(item)\\\">\\n                        {{ $tc('styla-cms-integration-plugin.actions.refresh-page-details.button.label') }}\\n                    </sw-context-menu-item>\\n                </template>\\n\\n                <template v-slot:column-path=\\\"{item, column, url}\\\">\\n                    <a v-bind:href=\\\"computePathLink(item)\\\" v-if=\\\"computePathLink(item)\\\" target=\\\"_blank\\\"> {{ computePathLink(item) }} </a>\\n                    <span v-else>{{ item.path }}</span>\\n                </template>\\n            </sw-entity-listing>\\n        </template>\\n    </sw-page>\\n{% endblock %}\\n\";","import template from './listing.html.twig';\nimport './listing.scss';\n\nconst {Component, Mixin} = Shopware;\nconst {Criteria} = Shopware.Data;\nconst { date } = Shopware.Utils.format;\n\nComponent.register(\n    'styla-cms-integration-page-listing',\n    {\n        template,\n\n        inject: [\n            'repositoryFactory',\n            'stylaPageApiService',\n            'stylaSynchronizationApiService',\n            'systemConfigApiService'\n        ],\n\n        mixins: [\n            Mixin.getByName('notification')\n        ],\n\n        data() {\n            return {\n                repository: null,\n                pages: null,\n                lastSuccessSynchronizationDate: null,\n                scheduleSynchronizationSuccess: false,\n                scheduleSynchronizationProcessing: false,\n                resetSynchronizationSuccess: false,\n                resetSynchronizationProcessing: false,\n            }\n        },\n\n        metaInfo() {\n            return {\n                title: this.$createTitle()\n            }\n        },\n\n        computed: {\n            columns() {\n                return this.getColumns();\n            }\n        },\n\n        created() {\n            this.createdComponent();\n        },\n\n        methods: {\n            createdComponent() {\n                this.repository = this.repositoryFactory.create('styla_cms_page');\n                this.domainsRepository = this.repositoryFactory.create('sales_channel_domain');\n\n                let domainSearchCriteria = new Criteria();\n                domainSearchCriteria.addSorting(Criteria.sort('createdAt', 'ASC'));\n                domainSearchCriteria.addFilter(\n                    Criteria.equals('salesChannel.typeId', '8a243080f92e4c719546314b577cf82b')\n                );\n                let domainsSearchPromise =this.domainsRepository.search(domainSearchCriteria, Shopware.Context.api);\n                domainsSearchPromise.then(\n                    (result) => {\n                        this.domainsList = result;\n                    }\n                )\n\n                let systemConfigurationFetchPromise = this.systemConfigApiService\n                    .getValues('StylaCmsIntegration');\n                systemConfigurationFetchPromise.then(\n                    (result) => {\n                        this.settings = result;\n                    }\n                )\n\n                let foundPages = null;\n                let pagesRequestPromise = this.repository.search(\n                    new Criteria(),\n                    Shopware.Context.api\n                );\n                pagesRequestPromise.then(\n                    (result) => {\n                        foundPages = result;\n                    }\n                );\n\n                Promise.all([pagesRequestPromise, systemConfigurationFetchPromise, domainsSearchPromise]).then(\n                    () => {\n                        this.pages = foundPages;\n                    }\n                );\n\n                this.stylaSynchronizationApiService\n                    .getLastSuccessSynchronizationDate()\n                    .then(\n                        (result) => {\n                            if (result.data.result) {\n                                this.lastSuccessSynchronizationDate = date(\n                                    result.data.result,\n                                    {\n                                        hour: '2-digit',\n                                        minute: '2-digit'\n                                    }\n                                )\n                            } else {\n                                this.lastSuccessSynchronizationDate = this.$tc(\n                                    'styla-cms-integration-plugin.actions.get-last-success-date.not_available'\n                                );\n                            }\n                        }\n                    ).catch(\n                        (error) => {\n                            console.error(\n                                'Failed to get last success synchronization date',\n                                error\n                            );\n\n                            this.createNotificationError({\n                                message: this.$tc(\n                                    'styla-cms-integration-plugin.actions.get-last-success-date.message.failed'\n                                )\n                            });\n                        }\n                    );\n            },\n            getColumns() {\n                return [\n                    {\n                        property: 'title',\n                        label: this.$tc('styla-cms-integration-plugin.page.listing.grid.column.title'),\n                        allowResize: true,\n                        primary: true\n                    },\n                    {\n                        property: 'path',\n                        label: this.$tc('styla-cms-integration-plugin.page.listing.grid.column.path'),\n                        allowResize: true\n                    },\n                    {\n                        property: 'accountName',\n                        label: this.$tc('styla-cms-integration-plugin.page.listing.grid.column.account-name'),\n                        allowResize: true\n                    },\n                    {\n                        property: 'createdAt',\n                        label: this.$tc('styla-cms-integration-plugin.page.listing.grid.column.created-at'),\n                        allowResize: true\n                    },\n                ];\n            },\n\n            resetSynchronizationStatus() {\n                this.resetSynchronizationProcessing = true;\n                const promise = this.stylaSynchronizationApiService.resetSynchronizationStatus();\n\n                promise.then(function (response) {\n                    this.resetSynchronizationProcessing = false;\n                    if (response.data.stuck <= 0) {\n                        this.createNotificationSuccess({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.reset-synchronization.message.none'\n                            )\n                        });\n                    } else if (response.data.stuck > 0 && response.data.stuck === response.data.cleared) {\n                        this.createNotificationSuccess({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.reset-synchronization.message.success'\n                            )\n                        });\n                    } else if (response.data.stuck > 0 && response.data.cleared > 0 && response.data.stuck > response.data.cleared) {\n                        this.createNotificationWarning({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.reset-synchronization.message.partial'\n                            )\n                        });\n                    } else {\n                        this.createNotificationWarning({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.reset-synchronization.message.failed'\n                            )\n                        });\n                    }\n                }.bind(this)).catch(function (error) {\n                    this.resetSynchronizationProcessing = false;\n                    if (error.response.data.errorCode !== undefined) {\n                        console.error(\n                            'Failed to reset synchronization status, error code: '\n                            + error.response.data.errorCode\n                        )\n                    }\n\n                    this.createNotificationError({\n                        message: this.$tc(\n                            'styla-cms-integration-plugin.actions.reset-synchronization.message.failed'\n                        )\n                    });\n                }.bind(this));\n            },\n\n            scheduleSynchronization() {\n                const promise = this.stylaPageApiService.scheduleSynchronization();\n\n                promise.then(function (response) {\n                    if (response.data.isScheduled) {\n                        this.createNotificationSuccess({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.schedule-pages-synchronization.message.success'\n                            )\n                        });\n                    } else if (response.data.errorCode === 'SYNCHRONIZATION_IS_ALREADY_RUNNING') {\n                        this.createNotificationWarning({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.schedule-pages-synchronization.message.is-running'\n                            )\n                        });\n                    } else {\n                        this.createNotificationWarning({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.schedule-pages-synchronization.message.was-not-scheduled'\n                            )\n                        });\n                    }\n                }.bind(this)).catch(function (error) {\n                    if (error.response.data.errorCode !== undefined) {\n                        console.error(\n                            'Failed to schedule styla pages synchronization, error code: '\n                            + error.response.data.errorCode\n                        )\n                    }\n\n                    this.createNotificationError({\n                        message: this.$tc(\n                            'styla-cms-integration-plugin.actions.schedule-pages-synchronization.message.failed'\n                        )\n                    });\n                }.bind(this));\n            },\n\n            refreshPageDetails(item) {\n                const promise = this.stylaPageApiService.refreshPageDetails(item.id);\n                this.createNotificationInfo({\n                    message: this.$tc(\n                        'styla-cms-integration-plugin.actions.refresh-page-details.message.scheduled'\n                    )\n                });\n\n                promise.then(function (response) {\n                    if (response.data.isSuccess) {\n                        this.createNotificationSuccess({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.refresh-page-details.message.success'\n                            )\n                        });\n                    } else if (response.data.errorCode === 'PAGE_NOT_FOUND') {\n                        this.createNotificationWarning({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.refresh-page-details.message.page-not-found'\n                            )\n                        });\n                    } else {\n                        this.createNotificationError({\n                            message: this.$tc(\n                                'styla-cms-integration-plugin.actions.refresh-page-details.failed'\n                            )\n                        });\n                    }\n                }.bind(this)).catch(function (error) {\n                    if (error.response.data.errorCode !== undefined) {\n                        console.error(\n                            'Failed to refresh styla page details, error code: '\n                            + error.response.data.errorCode\n                        )\n                    }\n\n                    this.createNotificationError({\n                        message: this.$tc(\n                            'styla-cms-integration-plugin.actions.refresh-page-details.message.failed'\n                        )\n                    });\n                }.bind(this));\n            },\n            computePathLink(value){\n                if (this.domainsList.length === 0) {\n                    return null;\n                }\n\n                if (this.pagesPathHashMap && this.pagesPathHashMap[value.id]) {\n                    return this.pagesPathHashMap[value.id];\n                }\n\n                let matchedLanguageId = null;\n                const accountNames = this.settings['StylaCmsIntegration.settings.accountNames'];\n                for (let languageId in accountNames) {\n                    if (value.accountName === accountNames[languageId] && accountNames[languageId]) {\n                        matchedLanguageId = languageId;\n                        break;\n                    }\n                }\n\n                let domainEntity = null;\n                if (matchedLanguageId && matchedLanguageId !== 'default') {\n                    domainEntity = this.domainsList.find(\n                        element => {\n                            return element.languageId === matchedLanguageId;\n                        }\n                    );\n                }\n\n                if (!domainEntity) {\n                    domainEntity = this.domainsList[0];\n                }\n\n                let domainUrl = domainEntity.url;\n                const defaultDomainUrl = this.settings['StylaCmsIntegration.settings.defaultDomainUrl'];\n                if (defaultDomainUrl) {\n                    domainUrl = defaultDomainUrl;\n                }\n\n                const domainUrls = this.settings['StylaCmsIntegration.settings.domainUrls'];\n                if (domainUrls && matchedLanguageId) {\n                    for (let languageId in domainUrls) {\n                        if (matchedLanguageId === matchedLanguageId && domainUrls[languageId]) {\n                            domainUrl = domainUrls[languageId];\n                            break;\n                        }\n                    }\n                }\n\n                let pathString = `${value.path}`;\n\n                const url = domainUrl.replace(/\\/$/, '') //Trim \"/\" at the end of the url\n                    + '/'\n                    + pathString.replace(/^\\//, '') // Trim \"/\" at the beginning of the path\n\n                if (!this.pagesPathHashMap) {\n                    this.pagesPathHashMap = {};\n                }\n                this.pagesPathHashMap[value.id] = url;\n\n                return url;\n            },\n            resetScheduleSynchronizationState() {\n                this.scheduleSynchronizationSuccess = false;\n                this.scheduleSynchronizationProcessing = false;\n            },\n            resetTheResetSynchronizationState() {\n                this.resetSynchronizationSuccess = false;\n                this.resetSynchronizationProcessing = false;\n            }\n        }\n    }\n);\n","import template from './styla-plugin-settings-icon.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('styla-plugin-settings-icon', {\n    template,\n});\n","export default \"{% block styla_plugin_settings_icon %}\\n    <span class=\\\"sw-icon\\\">\\n        <svg\\n            version=\\\"1.0\\\"\\n            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n            width=\\\"84.000000pt\\\"\\n            height=\\\"84.000000pt\\\"\\n            viewBox=\\\"0 0 84.000000 84.000000\\\"\\n            preserveAspectRatio=\\\"xMidYMid meet\\\">\\n            <g transform=\\\"translate(0.000000,84.000000) scale(0.100000,-0.100000)\\\" fill=\\\"#000000\\\" stroke=\\\"none\\\">\\n                <path d=\\\"M280 690 l0 -30 190 0 190 0 0 30 0 30 -190 0 -190 0 0 -30z\\\"></path>\\n                <path d=\\\"M137 573 c-4 -3 -7 -19 -7 -35 l0 -28 180 0 180 0 0 35 0 35 -173 0 c-96 0 -177 -3 -180 -7z\\\"></path>\\n                <path d=\\\"M228 430 l-5 -30 194 0 193 0 0 30 0 30 -189 0 -189 0 -4 -30z\\\"></path>\\n                <path d=\\\"M340 300 l0 -30 180 0 180 0 0 30 0 30 -180 0 -180 0 0 -30z\\\"></path>\\n                <path d=\\\"M180 155 l0 -35 195 0 195 0 0 35 0 35 -195 0 -195 0 0 -35z\\\"></path>\\n            </g>\\n        </svg>\\n    </span>\\n{% endblock %}\\n\";","export default \"{% block styla_cmsintegration_content_card_channel_config_accounts_card %}\\n    <sw-card class=\\\"sw-card--grid\\\"\\n             :title=\\\"$tc('styla-cms-integration-plugin.configuration.group.accounts.title')\\\">\\n\\n        {% block styla_cmsintegration_content_card_channel_config_accounts_card_container %}\\n            <sw-container>\\n\\n                {% block styla_cmsintegration_content_card_channel_config_accounts_card_container_settings %}\\n                    <div v-if=\\\"actualConfigData\\\" class=\\\"card-container\\\">\\n\\n                        {% block styla_cmsintegration_content_card_channel_config_accounts_card_container_settings_default %}\\n                            <div style=\\\"display: grid; grid-template-columns: 2fr 2fr; grid-column-gap: 5px\\\">\\n                                <sw-inherit-wrapper v-model=\\\"actualConfigData['StylaCmsIntegration.settings.defaultAccountName']\\\"\\n                                                    :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['StylaCmsIntegration.settings.defaultAccountName']\\\"\\n                                                    :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                    <template #content=\\\"props\\\">\\n                                        <sw-text-field\\n                                                    name=\\\"StylaCmsIntegration.settings.defaultAccountName\\\"\\n                                                    :mapInheritance=\\\"props\\\"\\n                                                    :label=\\\"$tc('styla-cms-integration-plugin.configuration.field.accountNames.default.label')\\\"\\n                                                    :disabled=\\\"props.isInherited\\\"\\n                                                    :value=\\\"props.currentValue\\\"\\n                                                    :error=\\\"defaultAccountNameErrorState\\\"\\n                                                    :required=\\\"true\\\"\\n                                                    @change=\\\"props.updateCurrentValue\\\">\\n                                        </sw-text-field>\\n                                    </template>\\n                                </sw-inherit-wrapper>\\n\\n                                <sw-inherit-wrapper v-model=\\\"actualConfigData['StylaCmsIntegration.settings.defaultDomainUrl']\\\"\\n                                                    :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['StylaCmsIntegration.settings.defaultDomainUrl']\\\"\\n                                                    :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                    <template #content=\\\"props\\\">\\n                                        <sw-single-select\\n                                                    name=\\\"StylaCmsIntegration.settings.defaultDomainUrl\\\"\\n                                                    :label=\\\"$tc('styla-cms-integration-plugin.configuration.field.domainUrls.default.label')\\\"\\n                                                    :disabled=\\\"props.isInherited\\\"\\n                                                    :value=\\\"props.currentValue\\\"\\n                                                    labelProperty=\\\"label\\\"\\n                                                    valueProperty=\\\"value\\\"\\n                                                    :options=\\\"salesChannelDomains\\\"\\n                                                    @change=\\\"props.updateCurrentValue\\\">\\n                                        </sw-single-select>\\n                                    </template>\\n                                </sw-inherit-wrapper>\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block styla_cmsintegration_content_card_channel_config_accounts_card_container_settings_language_accounts %}\\n                            <template v-for=\\\"language in systemLanguages\\\">\\n                                <div style=\\\"display: grid; grid-template-columns: 2fr 2fr; grid-column-gap: 5px\\\">\\n                                    <sw-inherit-wrapper v-model=\\\"accountNames[language.id]\\\"\\n                                                        :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['StylaCmsIntegration.settings.accountNames'][language.id]\\\"\\n                                                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                        <template #content=\\\"props\\\">\\n                                            <sw-text-field\\n                                                        :mapInheritance=\\\"props\\\"\\n                                                        :label=\\\"$tc('styla-cms-integration-plugin.configuration.field.accountNames.language_specific_account_name.label', 0, { name: language.name })\\\"\\n                                                        :disabled=\\\"props.isInherited\\\"\\n                                                        :value=\\\"props.currentValue\\\"\\n                                                        @change=\\\"props.updateCurrentValue\\\">\\n                                            </sw-text-field>\\n                                        </template>\\n                                    </sw-inherit-wrapper>\\n\\n                                    <sw-inherit-wrapper v-model=\\\"domainUrls[language.id]\\\"\\n                                                        :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['StylaCmsIntegration.settings.domainUrls'][language.id]\\\"\\n                                                        >\\n                                        <template #content=\\\"props\\\">\\n                                            <sw-single-select\\n                                                        :label=\\\"$tc('styla-cms-integration-plugin.configuration.field.domainUrls.language_specific_domain_url.label', 0, { name: language.name })\\\"\\n                                                        :disabled=\\\"props.isInherited\\\"\\n                                                        labelProperty=\\\"label\\\"\\n                                                        valueProperty=\\\"value\\\"\\n                                                        :options=\\\"salesChannelDomains\\\"\\n                                                        :value=\\\"props.currentValue\\\"\\n                                                        @change=\\\"props.updateCurrentValue\\\">\\n                                            </sw-single-select>\\n                                        </template>\\n                                    </sw-inherit-wrapper>\\n                                </div>\\n                            </template>\\n                        {% endblock %}\\n\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n\\n        {% block styla_cmsintegration_content_card_channel_config_accounts_card_loading %}\\n            <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n        {% endblock %}\\n\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './styla-cms-integration-settings-accounts.html.twig';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('styla-cms-integration-settings-accounts', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        defaultAccountNameErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        defaultAccountNameFilled: {\n            type: Boolean,\n            required: true,\n        },\n        salesChannelDomains: {\n            type: Object,\n            required: true,\n            default: {},\n        }\n    },\n\n    data() {\n        return {\n            // This should be different with computed below\n            configAccountName: 'StylaCmsIntegration.settings.accountNames',\n            configDomainUrl: 'StylaCmsIntegration.settings.domainUrls',\n            // ---\n            isLoading: false,\n            systemLanguages: [],\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    computed: {\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        accountNames: {\n            get: function () {\n                return this.allConfigs[this.selectedSalesChannelId][this.configAccountName] || {};\n            }\n        },\n\n        domainUrls: {\n            get: function () {\n                return this.allConfigs[this.selectedSalesChannelId][this.configDomainUrl] || {};\n            }\n        }\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            const criteria = new Criteria();\n            criteria.addSorting(Criteria.sort('createdAt', 'ASC'));\n\n            this.languageRepository.search(criteria, Shopware.Context.api).then(result => {\n                this.systemLanguages = result;\n                this.initLanguageConfig();\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        initLanguageConfig() {\n            // Set as object if it's array, otherwise the data will not sent by vue\n            if (\n                this.allConfigs[this.selectedSalesChannelId][this.configAccountName] === undefined ||\n                Array.isArray(this.allConfigs[this.selectedSalesChannelId][this.configAccountName])\n            ) {\n                /**\n                 * Here is a trick: we are using \"accountNames\" computed prop only for reading data in template\n                 * and creating config entry here to make it reactive, cuz our account config is an object.\n                 */\n                this.$set(this.allConfigs[this.selectedSalesChannelId], this.configAccountName, {});\n            }\n            if (\n                this.allConfigs[this.selectedSalesChannelId][this.configDomainUrl] === undefined ||\n                Array.isArray(this.allConfigs[this.selectedSalesChannelId][this.configDomainUrl])\n            ) {\n                this.$set(this.allConfigs[this.selectedSalesChannelId], this.configDomainUrl, {});\n            }\n        },\n\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n    },\n});\n","import template from './styla-cms-integration-settings-general.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('styla-cms-integration-settings-general', {\n    template,\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            const configPrefix = 'StylaCmsIntegration.settings.',\n                defaultConfigs = {\n                    pagesListSynchronizationInterval: 10,\n                    pageCacheDuration: 3600,\n                };\n\n            /**\n             * Initialize config data with default values.\n             */\n            for (const [key, defaultValue] of Object.entries(defaultConfigs)) {\n                if (this.allConfigs['null'][configPrefix + key] === undefined) {\n                    this.$set(this.allConfigs['null'], configPrefix + key, defaultValue);\n                }\n            }\n        },\n\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n    },\n});\n","export default \"{% block styla_cmsintegration_content_card_channel_config_accounts_card %}\\n    <sw-card class=\\\"sw-card--grid\\\"\\n             :title=\\\"$tc('styla-cms-integration-plugin.configuration.group.general.title')\\\">\\n\\n        {% block styla_cmsintegration_content_card_channel_config_accounts_card_container %}\\n            <sw-container>\\n\\n                {% block styla_cmsintegration_content_card_channel_config_accounts_card_container_settings %}\\n                    <div v-if=\\\"actualConfigData\\\" class=\\\"card-container\\\">\\n\\n                        {% block styla_cmsintegration_content_card_channel_config_pages %}\\n                            <sw-inherit-wrapper v-model=\\\"actualConfigData['StylaCmsIntegration.settings.extraPagesAllowedToOverride']\\\"\\n                                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['StylaCmsIntegration.settings.extraPagesAllowedToOverride']\\\"\\n                                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-textarea-field name=\\\"StylaCmsIntegration.settings.extraPagesAllowedToOverride\\\"\\n                                                       :mapInheritance=\\\"props\\\"\\n                                                       :label=\\\"$tc('styla-cms-integration-plugin.configuration.field.extraPages.label')\\\"\\n                                                       :helpText=\\\"$tc('styla-cms-integration-plugin.configuration.field.extraPages.helpText')\\\"\\n                                                       :disabled=\\\"props.isInherited\\\"\\n                                                       :value=\\\"props.currentValue\\\"\\n                                                       @change=\\\"props.updateCurrentValue\\\">\\n                                    </sw-textarea-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n                        {% block styla_cmsintegration_content_card_channel_config_interval %}\\n                            <sw-inherit-wrapper v-model=\\\"actualConfigData['StylaCmsIntegration.settings.pagesListSynchronizationInterval']\\\"\\n                                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['StylaCmsIntegration.settings.pagesListSynchronizationInterval']\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-field name=\\\"StylaCmsIntegration.settings.pagesListSynchronizationInterval\\\"\\n                                              type=\\\"number\\\"\\n                                              number-type=\\\"int\\\"\\n                                              :min=\\\"1\\\"\\n                                              :mapInheritance=\\\"props\\\"\\n                                              :label=\\\"$tc('styla-cms-integration-plugin.configuration.field.syncInterval.label')\\\"\\n                                              :helpText=\\\"$tc('styla-cms-integration-plugin.configuration.field.syncInterval.helpText')\\\"\\n                                              :disabled=\\\"props.isInherited\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              :required=\\\"true\\\"\\n                                              @change=\\\"props.updateCurrentValue\\\">\\n                                    </sw-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n                        {% block styla_cmsintegration_content_card_channel_config_cache_lifetime %}\\n                            <sw-inherit-wrapper v-model=\\\"actualConfigData['StylaCmsIntegration.settings.pageCacheDuration']\\\"\\n                                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['StylaCmsIntegration.settings.pageCacheDuration']\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-field name=\\\"StylaCmsIntegration.settings.pageCacheDuration\\\"\\n                                              type=\\\"number\\\"\\n                                              number-type=\\\"int\\\"\\n                                              :min=\\\"1\\\"\\n                                              :mapInheritance=\\\"props\\\"\\n                                              :label=\\\"$tc('styla-cms-integration-plugin.configuration.field.pageCache.label')\\\"\\n                                              :helpText=\\\"$tc('styla-cms-integration-plugin.configuration.field.pageCache.helpText')\\\"\\n                                              :disabled=\\\"props.isInherited\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              :required=\\\"true\\\"\\n                                              @change=\\\"props.updateCurrentValue\\\">\\n                                    </sw-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n\\n    </sw-card>\\n{% endblock %}\\n\";","import './pages/styla-cms-integration-settings';\nimport './pages/page-listing';\nimport './components/styla-plugin-settings-icon';\nimport './components/styla-cms-integration-settings-accounts';\nimport './components/styla-cms-integration-settings-general';\n\nimport enGB from './snippet/en-GB.json';\n\nconst { Module } = Shopware;\n\nModule.register('styla-cms-integration', {\n    type: 'plugin',\n    name: 'styla-cms-integration',\n    title: 'styla-cms-integration-plugin.configuration.label',\n    description: 'styla-cms-integration-plugin.page.listing.description',\n    color: '#ffd53d',\n    icon: 'regular-cog',\n\n    snippets: {\n        'en-GB': enGB,\n    },\n\n    routes: {\n        'settings': {\n            component: 'styla-cms-integration-settings',\n            path: 'settings',\n            meta: {\n                parentPath: 'sw.settings.index.plugins'\n            }\n        },\n        'pages-list': {\n            component: 'styla-cms-integration-page-listing',\n            path: 'styla/page'\n        }\n    },\n\n    navigation: [\n        {\n            id: 'styla-cms-integration-general', // Id will be used to link navigation menu hierarchy\n            label: 'styla-cms-integration-plugin.menu.title', // The name of the node menu point\n            color: '#ffd53d',\n            icon: 'regular-cog',\n            parent: 'sw-content',\n            position: 100\n        },\n        {\n            label: 'styla-cms-integration-plugin.page.listing.title',\n            color: '#77ff3d',\n            icon: 'solid-grip-lines',\n            path: 'styla.cms.integration.pages-list',\n            parent: 'styla-cms-integration-general',\n            position: 100\n        },\n    ],\n\n    settingsItem: {\n        group: 'plugins',\n        to: 'styla.cms.integration.settings',\n        iconComponent: 'styla-plugin-settings-icon',\n        backgroundEnabled: true\n    },\n});\n","export default (() => {\n    const context = require.context('./svg', false, /svg$/);\n\n    return context.keys().reduce((accumulator, item) => {\n        const componentName = item.split('.')[1].split('/')[1];\n        const component = {\n            name: componentName,\n            functional: true,\n            render(createElement, elementContext) {\n                const data = elementContext.data;\n\n                return createElement('span', {\n                    class: [data.staticClass, data.class],\n                    style: data.style,\n                    attrs: data.attrs,\n                    on: data.on,\n                    domProps: {\n                        innerHTML: context(item),\n                    },\n                });\n            },\n        };\n\n        accumulator.push(component);\n        return accumulator;\n    }, []);\n})();\n","import iconComponents from '../app/assets/icons/icons';\n\nconst { Component } = Shopware;\n\nexport default (() => {\n    return iconComponents.map((component) => {\n        return Component.register(component.name, component);\n    });\n})();\n","class StylaPageApiService {\n    constructor(httpClient, loginService) {\n        this.httpClient = httpClient;\n        this.loginService = loginService;\n        this.name = 'stylaPageApiService';\n    }\n\n    scheduleSynchronization() {\n        const headers = this.getHeaders();\n        return this.httpClient.post('/styla/page/_action/schedule-pages-synchronization', {}, { headers });\n    }\n\n    refreshPageDetails(pageId) {\n        const headers = this.getHeaders();\n        return this.httpClient.post('/styla/page/_action/refresh-details/'+pageId, {}, { headers });\n    }\n\n    getHeaders() {\n        return {\n            Accept: 'application/json',\n            Authorization: `Bearer ${this.loginService.getToken()}`,\n            'Content-Type': 'application/json'\n        };\n    }\n}\n\nexport default StylaPageApiService;\n","import StylaPageApiService from '../services/api/styla.page.api.service'\n\nShopware.Service().register('stylaPageApiService', (container) => {\n    const initContainer = Shopware.Application.getContainer('init');\n    return new StylaPageApiService(initContainer.httpClient, container.loginService);\n});\n","class StylaPageApiService {\n    constructor(httpClient, loginService) {\n        this.httpClient = httpClient;\n        this.loginService = loginService;\n        this.name = 'stylaPageApiService';\n    }\n\n    getLastSuccessSynchronizationDate() {\n        const headers = this.getHeaders();\n        return this.httpClient.get('/styla/synchronization/page/_action/get_last_success_date_time', {}, { headers });\n    }\n\n    resetSynchronizationStatus() {\n        const headers = this.getHeaders();\n        return this.httpClient.get('/styla/synchronization/page/_action/reset_synchronization_status', {}, { headers });\n    }\n\n    getHeaders() {\n        return {\n            Accept: 'application/json',\n            Authorization: `Bearer ${this.loginService.getToken()}`,\n            'Content-Type': 'application/json'\n        };\n    }\n}\n\nexport default StylaPageApiService;\n","import StylaSynchronizationApiService from '../services/api/styla.synchronization.api.service'\n\nShopware.Service().register('stylaSynchronizationApiService', (container) => {\n    const initContainer = Shopware.Application.getContainer('init');\n    return new StylaSynchronizationApiService(initContainer.httpClient, container.loginService);\n});\n","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nimport listToStyles from './listToStyles'\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nexport default function addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./styla-cms-integration-settings.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"f9058b3c\", content, true, {});","module.exports = \"<svg version=\\\"1.0\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"84.000000pt\\\" height=\\\"84.000000pt\\\" viewBox=\\\"0 0 84.000000 84.000000\\\" preserveAspectRatio=\\\"xMidYMid meet\\\"><g transform=\\\"translate(0.000000,84.000000) scale(0.100000,-0.100000)\\\" fill=\\\"#000000\\\" stroke=\\\"none\\\"><path d=\\\"M280 690 l0 -30 190 0 190 0 0 30 0 30 -190 0 -190 0 0 -30z\\\"></path><path d=\\\"M137 573 c-4 -3 -7 -19 -7 -35 l0 -28 180 0 180 0 0 35 0 35 -173 0 c-96 0 -177 -3 -180 -7z\\\"></path><path d=\\\"M228 430 l-5 -30 194 0 193 0 0 30 0 30 -189 0 -189 0 -4 -30z\\\"></path><path d=\\\"M340 300 l0 -30 180 0 180 0 0 30 0 30 -180 0 -180 0 0 -30z\\\"></path><path d=\\\"M180 155 l0 -35 195 0 195 0 0 35 0 35 -195 0 -195 0 0 -35z\\\"></path></g></svg>\"","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./listing.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"19063248\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./styles.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3b176780\", content, true, {});"],"sourceRoot":""}